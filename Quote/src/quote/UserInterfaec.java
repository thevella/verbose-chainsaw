/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quote;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import java.awt.datatransfer.*;
import java.awt.Toolkit;

/**
 *
 * @author Coles Laptop
 */
public class UserInterfaec extends javax.swing.JFrame {

    /**
     * Creates new form UserInterfaec
     */
    public UserInterfaec() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        PopUp = new javax.swing.JPopupMenu();
        Author_Remove = new javax.swing.JMenuItem();
        Auth_Search = new javax.swing.JMenuItem();
        Author_Info_Search = new javax.swing.JMenuItem();
        QuotePopOut = new javax.swing.JPopupMenu();
        Remove = new javax.swing.JMenuItem();
        CopyToClipBoard = new javax.swing.JMenuItem();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SearchTerm = new javax.swing.JTextArea();
        Quote_Search = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        Author_Search = new javax.swing.JRadioButton();
        Tags_Search = new javax.swing.JRadioButton();
        SearchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AuthorDisplay = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        Output1 = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Button_Add = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Author_Add = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        Quote_Add = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        Tags_Add = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jRadioButton1.setText("jRadioButton1");

        Author_Remove.setText("Remove Author");
        Author_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Author_RemoveActionPerformed(evt);
            }
        });
        PopUp.add(Author_Remove);

        Auth_Search.setText("Search By Author");
        Auth_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Auth_SearchActionPerformed(evt);
            }
        });
        PopUp.add(Auth_Search);

        Author_Info_Search.setText("Author Info");
        Author_Info_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Author_Info_SearchActionPerformed(evt);
            }
        });
        PopUp.add(Author_Info_Search);

        Remove.setText("Remove Quote");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        QuotePopOut.add(Remove);

        CopyToClipBoard.setText("Copy to Clipboard");
        CopyToClipBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyToClipBoardActionPerformed(evt);
            }
        });
        QuotePopOut.add(CopyToClipBoard);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(744, 485));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        SearchTerm.setColumns(1);
        SearchTerm.setLineWrap(true);
        SearchTerm.setRows(5);
        SearchTerm.setWrapStyleWord(true);
        jScrollPane1.setViewportView(SearchTerm);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 174;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 47, 11, 0);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        Quote_Search.setBackground(new java.awt.Color(255, 255, 255));
        Quote_Search.setText("Quote");
        Quote_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Quote_SearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 89, 0, 66);
        jPanel2.add(Quote_Search, gridBagConstraints);

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 155;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 412, 0, 66);
        jPanel2.add(jSeparator1, gridBagConstraints);

        Author_Search.setBackground(new java.awt.Color(255, 255, 255));
        Author_Search.setText("Author");
        Author_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Author_SearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 89, 0, 66);
        jPanel2.add(Author_Search, gridBagConstraints);

        Tags_Search.setBackground(new java.awt.Color(255, 255, 255));
        Tags_Search.setText("Tags");
        Tags_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tags_SearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 89, 0, 66);
        jPanel2.add(Tags_Search, gridBagConstraints);

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 83, 0, 66);
        jPanel2.add(SearchButton, gridBagConstraints);

        AuthorDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AuthorDisplay.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = new String[1];
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        AuthorDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AuthorDisplayMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(AuthorDisplay);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 72;
        gridBagConstraints.ipady = 137;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        Output1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {""};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        Output1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Output1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Output1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Output1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 512;
        gridBagConstraints.ipady = 137;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 33, 0, 66);
        jPanel2.add(jScrollPane3, gridBagConstraints);

        jTabbedPane1.addTab("Search", jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Author");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 62);
        jPanel3.add(jLabel1, gridBagConstraints);

        Button_Add.setText("Add");
        Button_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_AddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(47, 100, 0, 69);
        jPanel3.add(Button_Add, gridBagConstraints);

        Author_Add.setColumns(20);
        Author_Add.setLineWrap(true);
        Author_Add.setRows(5);
        Author_Add.setWrapStyleWord(true);
        jScrollPane5.setViewportView(Author_Add);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 320;
        gridBagConstraints.ipady = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(16, 176, 0, 0);
        jPanel3.add(jScrollPane5, gridBagConstraints);

        Quote_Add.setColumns(20);
        Quote_Add.setLineWrap(true);
        Quote_Add.setRows(5);
        Quote_Add.setWrapStyleWord(true);
        jScrollPane6.setViewportView(Quote_Add);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 320;
        gridBagConstraints.ipady = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 175, 0, 0);
        jPanel3.add(jScrollPane6, gridBagConstraints);

        Tags_Add.setColumns(20);
        Tags_Add.setLineWrap(true);
        Tags_Add.setRows(5);
        Tags_Add.setWrapStyleWord(true);
        jScrollPane7.setViewportView(Tags_Add);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 320;
        gridBagConstraints.ipady = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 175, 0, 0);
        jPanel3.add(jScrollPane7, gridBagConstraints);

        jLabel2.setText("Quote");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 0, 62);
        jPanel3.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 62);
        jPanel3.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Format Tags like tag1,tag2,tag3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 11, 62);
        jPanel3.add(jLabel4, gridBagConstraints);

        jTabbedPane1.addTab("Add", jPanel3);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("This is the Quote's Database Program. This program is designed to collect quotes from\nvarious author's and present them to the user with a description of the author as well. \nThe program contains a few useful buttons and areas that are helpful to know:\n\n1. The Search Tab : Used to search for specific authors, quotes, or tags.\n\t- There are three screens on the Search Tab:\n\t\t1. The Author Name Display\n\t\t2. The Author Quote Display\n\t\t3. The Search Box\n\n\t- There is also three selections with function for searching: Author, Tag, or Quote.\n\n\t- After a search an author can be first left clicked then right clicked to either\n\t\t1. Show only quotes by that author\n\t\t2. Remove that author entirely, including all quotes by that author\n\t\t3. Show biographical info for that author\n\n\t- Likewise the quotes can be first left clicked then right clicked to\n\t\t1. Remove the quote\n\t\t2. Copy the contents of that quote to your clipboard for pasting\n\t\t     into another document.\n\n2. The Add Tab: Used to add new authors, quotes, and tags to the program.\n        - There are three displays in the Add tab:\n\t\t1. The Author Input Display\n\t\t2. The Quote Input Display\n\t\t3. The Tag Input Display\n\t- There is a add button which is used after the input of all of the three displays.\n\t- Once the Quote is added, if the author does not already exist the user will\n\t    be prompted to add the info for the author\n\n3. The Info Tab: Used to remind the user of the functionality of the program.\n\n4. Tagging Explanation: There are specific tags that identify each quotation, which consist\n     of: \n          Open, Happy, Alive, Good, Love, Interested, Positive, Strong, Angry, Depressed,\n             Confused, Helpless, Indifferent, Afraid, Hurt, Sad.\n\n\t- These tags are used to identify the quotes, and are your key words for \n\t   searching the tags. They list exactly their name, if the tag is sad then it was\n\t   thought to be sad.");
        jScrollPane4.setViewportView(jTextArea1);

        jTabbedPane1.addTab("Help", jScrollPane4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(760, 492));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Auth_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Auth_SearchActionPerformed
        //this is for when the user clicks on the serach author from the menu .
        String to = AuthorDisplay.getSelectedValue();
        //getting teh author that the user is whiching for them to search by
        //setting the search panel equal to what ever the user click on
        SearchTerm.setText(to);
        //click the search button and therefore seraching for the author
        SearchButton.doClick();

    }//GEN-LAST:event_Auth_SearchActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        //so the Quote class can be accessed
        Quote aa = new Quote();
        //getting the selected quote that the user has click on and replacing all of the HTML so that is is usable in the search.
        String to = Output1.getSelectedValue().replaceAll("<html>", "");
        //more striping of the HTML "<br/>" is the html equivalent of the "\n".
        String te = to.replaceAll("<br/>", "\n");
        //take everything after the quote off(triming the author.)
        String ta = te.substring(0, te.indexOf("--")).trim();

        //System.out.println(ta);
        //calling the remove quote method from the quote class.giving it the quote and the type of thing to remove
        try {
            aa.removeQuote(ta, 3);
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }
        //essentially refreshing the search result
        SearchButton.doClick();

    }//GEN-LAST:event_RemoveActionPerformed

    private void Output1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Output1MouseClicked
        //if the user rights clicks inside the Quote JList the pops up with the option to remove the selected quote.
        if (SwingUtilities.isRightMouseButton(evt) && !Output1.isSelectionEmpty()) { // if right mouse button clicked
            //calling the quotepopout menu and also telling it where to go.
            QuotePopOut.show(evt.getComponent(), evt.getX(), evt.getY());

            // System.out.println("bamao");
        }
    }//GEN-LAST:event_Output1MouseClicked

    private void AuthorDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AuthorDisplayMouseClicked
        //detecing if the right click has been clickd and if it is it will call the PopUp menu and it will display all of its options
        if (SwingUtilities.isRightMouseButton(evt) && !AuthorDisplay.isSelectionEmpty()) { // if right mouse button clicked
            //calling the popup menu with all of the options inside the popup menu.Also getting the location of the mouse click inside the Jlist and displaying the menu there
            PopUp.show(evt.getComponent(), evt.getX(), evt.getY());
            //System.out.println("sdsd");
        }
    }//GEN-LAST:event_AuthorDisplayMouseClicked

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        Quote aa = new Quote();

        int todec = 1;
        //an if statment so that is the user has the ability to decided that they want to search by the author without tags.
        if (Author_Search.isSelected() && !Tags_Search.isSelected()) {
            //making the JLIST filled with authors visibile for the user
            AuthorDisplay.setVisible(true);

            todec = 1;
            //getting the author to search from the Search Term panel.
            String Term = SearchTerm.getText();
            //intializing th result set to pass to the Author SQL search
            ResultSet resultSet = null;
            String test = "";
            //making a connecton for the SQL search methid
            Connection connec = aa.getDBConnection();
            //intializing a statment for the sql search
            Statement stmt = null;

            try {
                //getting a value for STMT by calling the create statment method from the Quote class
                stmt = connec.createStatement();
                //settign result set equal to the search results by calling the searchrough method and telling it to search in the Authors table for the entred author, and telling it search for the authors name by passing it the value of two
                resultSet = aa.searchRough(2, Term, 2, connec, stmt);
                //catching exceptions
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            } //finally {
              //connec.close();
              //}
              //making an array list to store both the authors names and the authors quote.
            ArrayList<String> ToList = new ArrayList<String>();
            ArrayList<String> QuoteList = new ArrayList<String>();

            try {
                //getting all of the results and if there is no result it will output a no results found message
                if (resultSet.next()) {
                    try {
                        do {
                            //test += resultSet.getString(3) + "\n";
                            //test += "-- " + resultSet.getString(2) + "\n" + "\n";
                            //formatting the text to send to the quote output area and sending it to an array list.
                            QuoteList.add(("<html>" + resultSet.getString(3) + "<br/>" + "-- " + resultSet.getString(2)
                                    + "<br/>" + "<br/>" + "<html>").replaceAll("\n", "<br/>"));
                            //filling a 2nd array list with the names of all authors.
                            ToList.add(resultSet.getString(2));
                            //converthing both of the array lists to array because that is all that JLists can display
                            String[] Quote = QuoteList.toArray(new String[QuoteList.size()]);
                            String[] out1 = ToList.toArray(new String[ToList.size()]);

                            Set<String> out = new LinkedHashSet<String>(Arrays.asList(out1));
                            //sending both of the arrays to their respective positions in teh UI
                            Output1.setListData(Quote);
                            AuthorDisplay.setListData(out.toArray(new String[out.size()]));

                        } while (resultSet.next());
                        //catching exceptins
                    } catch (SQLException ex) {
                        Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //this will be send to the ui if no results are found
                } else {
                    String[] er = { "No Results Found" };
                    AuthorDisplay.setListData(er);
                    Output1.setListData(er);

                }
                //cathinig exceiptions
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            }
            //the 2nd part of the else if statment that will run if the user has decided to search for only quotes.
        } else if (Quote_Search.isSelected() && !Tags_Search.isSelected()) {
            //making the author display invisibile.Doesnt have a use at this poiint.
            AuthorDisplay.setVisible(false);
            todec = 2;
            //getting the SearchTerm from the search box and storing it to the string called Term.
            String Term = SearchTerm.getText();

            //same as in if (Author_Search.isSelected() && !Tags_Search.isSelected())
            ResultSet resultSet = null;
            String test = "";
            Connection connec = aa.getDBConnection();

            Statement stmt = null;

            try {
                //calling method to get stmt value for when the method is called
                stmt = connec.createStatement();
                //passing the values that was taken from user and sending it to the search rough method so that is returhs the quote search results
                resultSet = aa.searchRough(3, Term, 3, connec, stmt);
                //catching any exceptionsg
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            }
            //intilizing array list to store the quotes values
            ArrayList<String> QuoteOut = new ArrayList<String>();

            try {
                //if any results turn up or else it will send out a measage saying no results.
                if (resultSet.next()) {
                    try {

                        do {
                            test += resultSet.getString(3) + "\n";
                            test += "-- " + resultSet.getString(2) + "\n\n";
                            //adding the results to the array list while formating it for the JList
                            QuoteOut.add(("<html>" + resultSet.getString(3) + "<br/>" + "-- " + resultSet.getString(2)
                                    + "<br/>" + "<br/>" + "<html>").replaceAll("\n", "<br/>"));
                            //converting the array list to an array so that it can be passed to the JList
                            String[] quote1 = QuoteOut.toArray(new String[QuoteOut.size()]);
                            Output1.setListData(quote1);
                        } while (resultSet.next());
                        //cathing any excceptions
                    } catch (SQLException ex) {
                        Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //if no results are found it will send ro results.
                } else {
                    String[] er = { "No Results Found" };
                    Output1.setListData(er);
                }
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (Quote_Search.isSelected() && Tags_Search.isSelected()) {
            System.out.println("Quotes and Tags are Selected");
            //aa.searchRough(2,SearchTerm.getText(),4           );
            AuthorDisplay.setVisible(false);
            todec = 2;
            String Term = SearchTerm.getText();
            //Same as in if (Author_Search.isSelected() && !Tags_Search.isSelected())
            ResultSet resultSet = null;
            String test = "";
            Connection connec = aa.getDBConnection();

            Statement stmt = null;

            try {
                //if (Author_Search.isSelected() && !Tags_Search.isSelected())
                stmt = connec.createStatement();
                //passing the tag to search quote by to the search rough method tags sections
                resultSet = aa.searchRough(3, Term, 4, connec, stmt);
                //cathching exception
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            } //finally {
              //connec.close();
              //}
              //making arraylist to store the quotes that the tags search yields
            ArrayList<String> QuoteOut = new ArrayList<String>();

            try {
                //if there are any results else it will display no results found.
                if (resultSet.next()) {
                    try {

                        do {
                            test += resultSet.getString(3) + "\n";
                            test += "-- " + resultSet.getString(2) + "\n\n";
                            //formating the output to the JLlist and sending the results to an arraylist
                            QuoteOut.add(("<html>" + resultSet.getString(3) + "<br/>" + "-- " + resultSet.getString(2)
                                    + "<br/>" + "<br/>" + "<html>").replaceAll("\n", "<br/>"));
                            //converting it to an array so that it can be sent to a JList
                            String[] quote1 = QuoteOut.toArray(new String[QuoteOut.size()]);
                            //sending the results to the Jlist output..
                            Output1.setListData(quote1);
                        } while (resultSet.next());
                    } catch (SQLException ex) {
                        Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //if there are no results found.
                } else {
                    String[] er = { "No Results Found" };
                    Output1.setListData(er);
                }
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            }
            //if the user is searching by author for tag
        } else if (Author_Search.isSelected() && Tags_Search.isSelected()) {
            //making the author Jlist visibile
            AuthorDisplay.setVisible(true);

            todec = 1;
            //setting the users input from the search box equal to a string so that it can be passed to the search method for tags
            String Term = SearchTerm.getText();

            //intilizaing resultssets and connection while calling the get conncetion methods
            ResultSet resultSet = null;
            String test = "";
            Connection connec = aa.getDBConnection();

            Statement stmt = null;

            try {
                //calling the statment funciton to assign its value to the STMT
                stmt = connec.createStatement();
                //Calling the serach method and storing what ever it returns to the resultset variable which is ready to be converted to a string
                resultSet = aa.searchRough(2, Term, 4, connec, stmt);
                //catching any errors
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            }
            //making array list to store the quotes and the authors
            ArrayList<String> ToList = new ArrayList<String>();
            ArrayList<String> QuoteList = new ArrayList<String>();

            try {
                //if there is any result it will display or else the else statment will run
                if (resultSet.next()) {
                    try {
                        do {
                            test += resultSet.getString(3) + "\n";
                            test += "-- " + resultSet.getString(2) + "\n" + "\n";
                            //formating what we send to the arraylist for the actual quote Jlist
                            QuoteList.add(("<html>" + resultSet.getString(3) + "<br/>" + "-- " + resultSet.getString(2)
                                    + "<br/>" + "<br/>" + "<html>").replaceAll("\n", "<br/>"));
                            //sending the info for the author JList to a another arraylist
                            ToList.add(resultSet.getString(2));

                            //converting the ArrayList to a normal array so that it can be sent to the Jlist
                            String[] Quote = QuoteList.toArray(new String[QuoteList.size()]);
                            String[] out1 = ToList.toArray(new String[ToList.size()]);
                            //to store and sort rs.
                            Set<String> out = new LinkedHashSet<String>(Arrays.asList(out1));

                            Output1.setListData(Quote);
                            AuthorDisplay.setListData(out.toArray(new String[out.size()]));

                        } while (resultSet.next());
                    } catch (SQLException ex) {
                        Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    // if resultSet.next() returns false that means that no results were found so it sends this to the panels instead
                } else {
                    String[] er = { "No Results Found" };
                    AuthorDisplay.setListData(er);
                    Output1.setListData(er);
                    //catcihng exceptions
                }
            } catch (SQLException ex) {
                Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void Tags_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tags_SearchActionPerformed
        // TODO add your handling code here:
        //useless
    }//GEN-LAST:event_Tags_SearchActionPerformed

    private void Author_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Author_SearchActionPerformed
        //so the user cannot search by both author and quote at the same time.This is setting the quote search button equal to false.
        Quote_Search.setSelected(false);

        //Search_Author.setOpaque(true);
    }//GEN-LAST:event_Author_SearchActionPerformed

    private void Quote_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Quote_SearchActionPerformed
        //so the user cannot search by both author and quote at the same time.This is setting the author search buttion equal to false.
        Author_Search.setSelected(false);
    }//GEN-LAST:event_Quote_SearchActionPerformed

    private void Author_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Author_RemoveActionPerformed
        Quote aa = new Quote();

        try {
            /*for when the user removes the author in the Author Jlist
            it will remove both the author from the sql database and the quotes of the authors*/
            aa.removeQuote(AuthorDisplay.getSelectedValue(), 2);
            aa.removeAuthor(AuthorDisplay.getSelectedValue(), 1);
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }
        //refreshing the results that is displayed
        SearchButton.doClick();

    }//GEN-LAST:event_Author_RemoveActionPerformed

    private void Button_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_AddActionPerformed
        //so that the methods in the quote class can be accesed
        Quote aa = new Quote();
        //Same as in if (Author_Search.isSelected() && !Tags_Search.isSelected())
        Connection connec = aa.getDBConnection();

        Statement stmt = null;

        try {
            stmt = connec.createStatement();

        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            String[] tempTags = Tags_Add.getText().replaceAll("'", "''").split(",");
            String tagsNew = "";

            for (String x : tempTags) {
                tagsNew += " " + x.trim() + " \n";
            }
            tagsNew = tagsNew.substring(0, tagsNew.length() - 1);
            String authorTemp = Author_Add.getText();
            String quoteTemp = Quote_Add.getText();

            boolean continues = true;

            int location = 0;
            while (continues && quoteTemp.contains(" ")) {
                continues = false;
                //count = 0;
                for (int x = 0; x < quoteTemp.length(); x++) {
                    if (!String.valueOf(quoteTemp.charAt(x)).matches("\n") && x - location == 73 && x > 0) {

                        String test = quoteTemp.substring(0, x);
                        location = test.lastIndexOf(" ");

                        if (location == -1) {
                            continues = false;
                            //print(test + "\n");
                            break;
                        }

                        quoteTemp = quoteTemp.substring(0, location) + "\n" + quoteTemp.substring(location + 1);
                        continues = true;
                        break;
                    } else if (String.valueOf(quoteTemp.charAt(x)).matches("\n")) {
                        location = x;
                    }

                }

            }

            continues = true;

            location = 0;
            while (continues && authorTemp.contains(" ")) {
                continues = false;
                //count = 0;
                for (int x = 0; x < authorTemp.length(); x++) {
                    if (!String.valueOf(authorTemp.charAt(x)).matches("\n") && x - location == 73 && x > 0) {

                        String test = authorTemp.substring(0, x);
                        location = test.lastIndexOf(" ");

                        if (location == -1) {
                            continues = false;
                            //print(test + "\n");
                            break;
                        }

                        authorTemp = authorTemp.substring(0, location) + "\n" + authorTemp.substring(location + 1);
                        continues = true;
                        break;
                    } else if (String.valueOf(authorTemp.charAt(x)).matches("\n")) {
                        location = x;
                    }

                }

            }

            aa.insertQuotes(authorTemp.replaceAll("'", "''"), quoteTemp.replaceAll("'", "''"), tagsNew);

            if (!aa.searchExact(1, authorTemp.replaceAll("'", "''"), 2, connec, stmt).next()) {
                //if there is no author found for the author set it will ask for info on the author
                //making a popup windows so that the user has some where to insert the authors info
                JTextArea xField = new JTextArea(15, 30);
                xField.setLineWrap(true);
                JScrollPane te = new JScrollPane(xField);

                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("User Info"));
                myPanel.add(te);
                myPanel.add(Box.createVerticalStrut(40)); // a spacer

                int result = JOptionPane.showConfirmDialog(null, myPanel, "Please Enter Author Info",
                        JOptionPane.OK_CANCEL_OPTION);
                String path = xField.getText();

                continues = true;

                location = 0;

                while (continues && path.contains(" ")) {
                    continues = false;
                    //count = 0;
                    for (int x = 0; x < path.length(); x++) {
                        if (!String.valueOf(path.charAt(x)).matches("\n") && x - location == 73 && x > 0) {

                            String test = path.substring(0, x);
                            location = test.lastIndexOf(" ");

                            if (location == -1) {
                                continues = false;
                                //print(test + "\n");
                                break;
                            }

                            path = path.substring(0, location) + "\n" + path.substring(location + 1);
                            continues = true;
                            break;
                        } else if (String.valueOf(path.charAt(x)).matches("\n")) {
                            location = x;
                        }

                    }

                }

                path = path.replaceAll("'", "''").trim();
                aa.insertAuthor(authorTemp.replaceAll("'", "''"), path, tagsNew);

            } else {
                ResultSet temperary = aa.searchExact(1, authorTemp.replaceAll("'", "''"), 2, connec, stmt);
                temperary.next();
                String[] temp = { temperary.getString(1), temperary.getString(2), temperary.getString(3) };

                aa.removeAuthor(temp[0], 1);
                aa.insertAuthor(temp[0], temp[1], temp[2] + "\n" + tagsNew);

            }
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }

        Author_Add.setText("");
        Quote_Add.setText("");
        Tags_Add.setText("");

    }//GEN-LAST:event_Button_AddActionPerformed

    private void Author_Info_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Author_Info_SearchActionPerformed
        Quote aa = new Quote();
        //getting the value for the selected quote so that the correct author can be removed
        String ta = AuthorDisplay.getSelectedValue();
        //
        Connection connec = aa.getDBConnection();

        Statement stmt = null;

        try {
            stmt = connec.createStatement();

        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        try {
            rs = aa.searchExact(1, ta, 2, connec, stmt);
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            while (rs.next()) {
                Output1.setListData(new String[] {
                        "<html>-- Author Info -- <br/><br/>" + rs.getString(2).replaceAll("\n", "<br/>") + "</html>" });
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaec.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Author_Info_SearchActionPerformed

    private void CopyToClipBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyToClipBoardActionPerformed
        //so the Quote class can be accessed
        Quote aa = new Quote();
        //getting the selected quote that the user has click on and replacing all of the HTML so that is is usable in the search.
        String te = Output1.getSelectedValue().replaceAll("<html>", "");
        //more striping of the HTML "<br/>" is the html equivalent of the "\n".
        te = te.replaceAll("<br/>", "\n");
        
        // Uses the method from the toolkit to create a new clipboard
        // object and set the contents as a string selection object
        // that contains the content of the sanatized input from the 
        // jPopupMenu, making your clipboard hold that value
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(te.trim()), null);
    }//GEN-LAST:event_CopyToClipBoardActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterfaec.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterfaec.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterfaec.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterfaec.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterfaec().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Auth_Search;
    private javax.swing.JList<String> AuthorDisplay;
    private javax.swing.JTextArea Author_Add;
    private javax.swing.JMenuItem Author_Info_Search;
    private javax.swing.JMenuItem Author_Remove;
    private javax.swing.JRadioButton Author_Search;
    private javax.swing.JButton Button_Add;
    private javax.swing.JMenuItem CopyToClipBoard;
    private javax.swing.JList<String> Output1;
    private javax.swing.JPopupMenu PopUp;
    private javax.swing.JPopupMenu QuotePopOut;
    private javax.swing.JTextArea Quote_Add;
    private javax.swing.JRadioButton Quote_Search;
    private javax.swing.JMenuItem Remove;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextArea SearchTerm;
    private javax.swing.JTextArea Tags_Add;
    private javax.swing.JRadioButton Tags_Search;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
